import os
import time
import click
from pathfault.logger import setup_logger

# Import service commands
from pathfault.modules.core.inconsistency_detector.services.create_inconsistency_detector_config import create_inconsistency_detector_config
from pathfault.modules.core.inconsistency_detector.services.send_confusable_uri import send_confusable_uri
from pathfault.modules.core.inconsistency_detector.services.convert_logs_to_csv import convert_logs_to_csv

logger = setup_logger(__name__)

@click.command("get-csv-with-sending-exploit-payloads")
@click.option(
    "--port-map-path",
    required=True,
    help="Path to the port_map.json used to generate config and target URLs."
)
@click.option(
    "--exploit-option-file",
    required=True,
    type=click.Path(exists=True),
    help="Path to the JSON file specifying exploit payload and mapping options."
)
@click.option(
    "--result-root-dir",
    default="./pathfault/results/inconsistency_detector",
    show_default=True,
    help="Base directory for output files."
)
@click.option(
    "--csv-output-path",
    default=None,
    type=click.Path(),
    help="Optional path for the output CSV file (default: result-root-dir/converted_logs.csv)."
)
@click.option(
    "--num-procs",
    default=64,
    show_default=True,
    help="Number of parallel processes to use for sending requests."
)
def get_csv_with_sending_exploit_payloads_workflow(port_map_path, exploit_option_file, result_root_dir, csv_output_path, num_procs):
    """
    Workflow to validate exploit payloads and extract CSV logs:
    1. Generate config
    2. Send exploit payloads
    3. Convert logs to CSV
    """
    ctx = click.get_current_context()

    config_path = os.path.join(result_root_dir, "inconsistency_detector_config")
    logs_dir = os.path.join(os.path.dirname(port_map_path), "logs")
    final_csv_output = csv_output_path or os.path.join(result_root_dir, "converted_logs.csv")

    logger.info("Step 1: Creating inconsistency detector config...")
    ctx.invoke(create_inconsistency_detector_config, port_map_path=port_map_path, output_path=config_path)

    logger.info("Step 2: Sending exploit payloads...")
    ctx.invoke(
        send_confusable_uri,
        config=config_path,
        exploit=True,
        exploit_option_file=exploit_option_file,
        num_procs=num_procs
    )

    logger.info("Waiting briefly before parsing logs to ensure all data is flushed...")
    time.sleep(5)

    logger.info("Step 3: Converting PCAP logs to CSV...")
    ctx.invoke(convert_logs_to_csv, logs_dir=logs_dir, output_path=final_csv_output)

    logger.info("ðŸ“Š CSV output written to: %s", final_csv_output)

__all__ = ["get_csv_with_sending_exploit_payloads_workflow"]
