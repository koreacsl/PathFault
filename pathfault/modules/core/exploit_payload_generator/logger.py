# pathfault/modules/core/exploit_payload_generator/services/logger.py

import logging
import sys

# ─── Custom SMT log levels ────────────────────────────────────────────────────
SMT_SUCCESS_LEVEL = 25
SMT_FAILED_LEVEL  = 35

logging.addLevelName(SMT_SUCCESS_LEVEL, "SMT_SUCCESS")
logging.addLevelName(SMT_FAILED_LEVEL,  "SMT_FAILED")

# ─── ANSI color codes ──────────────────────────────────────────────────────────
COLOR_RESET   = "\033[0m"
COLOR_SUCCESS = "\033[96m"   # Cyan for successes
COLOR_FAILED  = "\033[95m"   # Magenta for failures (distinct from ERROR)

class SMTLogger(logging.Logger):
    """
    Logger subclass with two custom methods:
      - smt_success(msg): log at SMT_SUCCESS_LEVEL (cyan)
      - smt_failed(msg):  log at SMT_FAILED_LEVEL  (magenta)
    """
    def smt_success(self, msg: str, *args, **kwargs) -> None:
        if self.isEnabledFor(SMT_SUCCESS_LEVEL):
            self._log(SMT_SUCCESS_LEVEL, msg, args, **kwargs)

    def smt_failed(self, msg: str, *args, **kwargs) -> None:
        if self.isEnabledFor(SMT_FAILED_LEVEL):
            self._log(SMT_FAILED_LEVEL, msg, args, **kwargs)

# Tell the logging module to use our SMTLogger
logging.setLoggerClass(SMTLogger)

class ColoredFormatter(logging.Formatter):
    """Only colors SMT_SUCCESS and SMT_FAILED messages."""
    def format(self, record: logging.LogRecord) -> str:
        text = super().format(record)
        if record.levelno == SMT_SUCCESS_LEVEL:
            return f"{COLOR_SUCCESS}{text}{COLOR_RESET}"
        if record.levelno == SMT_FAILED_LEVEL:
            return f"{COLOR_FAILED}{text}{COLOR_RESET}"
        return text

def setup_smt_logger(name: str, level: int = logging.DEBUG) -> SMTLogger:
    """
    Create and return a logger that supports smt_success() and smt_failed(),
    coloring only those two levels.
    """
    fmt     = "[%(asctime)s] [%(levelname)s] %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(ColoredFormatter(fmt, datefmt=datefmt))

    logger = logging.getLogger(name + ".smt")  # returns an SMTLogger
    logger.setLevel(level)
    logger.propagate = False  # prevent double-logging

    if not logger.handlers:
        logger.addHandler(handler)

    return logger
