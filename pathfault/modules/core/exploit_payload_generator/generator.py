import click
from pathfault.logger import setup_logger
from pathfault.modules.core.exploit_payload_generator.services.generate_exploit_payloads import \
    cli_generate_exploit_payloads
from pathfault.modules.core.exploit_payload_generator.services.validate_exploit_payloads import \
    cli_validate_exploit_payloads
from pathfault.modules.core.exploit_payload_generator.workflows.generate_validated_exploit_payloads import \
    cli_generate_validated_exploit_payloads

logger = setup_logger(__name__)

# -----------------------------
# Command Groups
# -----------------------------
@click.group("services")
def services_group():
    """Low-level services for exploit generation and validation."""
    pass


@click.group("workflows")
def workflows_group():
    """High-level workflows combining multiple exploit steps."""
    pass


@click.group("exploit-generator")
def exploit_generator_command():
    """
    Commands for generating and validating exploit payloads.
    Divided into service modules and high-level workflows.
    """
    logger.info("Entered 'exploit-generator' command group.")


# Register commands
services_group.add_command(cli_generate_exploit_payloads)
services_group.add_command(cli_validate_exploit_payloads)
workflows_group.add_command(cli_generate_validated_exploit_payloads)

exploit_generator_command.add_command(services_group)
exploit_generator_command.add_command(workflows_group)

__all__ = ["exploit_generator_command"]