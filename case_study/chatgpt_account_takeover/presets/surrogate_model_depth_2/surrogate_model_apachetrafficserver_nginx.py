from z3 import *
from pathfault.inconsistency.server import Server
from pathfault.inconsistency.transformation import *
from pathfault.inconsistency.condition import *


def get_surrogate_model():
    apachetrafficserver = Server(
        name="apachetrafficserver",
        condition_list=[
            ContainsType("\x00", not_condition=True),
            ContainsType("\x01", not_condition=True),
            ContainsType("\x02", not_condition=True),
            ContainsType("\x03", not_condition=True),
            ContainsType("\x04", not_condition=True),
            ContainsType("\x05", not_condition=True),
            ContainsType("\x06", not_condition=True),
            ContainsType("\x07", not_condition=True),
            ContainsType("\x08", not_condition=True),
            ContainsType("\t", not_condition=True),
            ContainsType("\n", not_condition=True),
            ContainsType("\x0b", not_condition=True),
            ContainsType("\x0c", not_condition=True),
            ContainsType("\r", not_condition=True),
            ContainsType("\x0e", not_condition=True),
            ContainsType("\x0f", not_condition=True),
            ContainsType("\x10", not_condition=True),
            ContainsType("\x11", not_condition=True),
            ContainsType("\x13", not_condition=True),
            ContainsType("\x12", not_condition=True),
            ContainsType("\x15", not_condition=True),
            ContainsType("\x16", not_condition=True),
            ContainsType("\x14", not_condition=True),
            ContainsType("\x17", not_condition=True),
            ContainsType("\x18", not_condition=True),
            ContainsType("\x19", not_condition=True),
            ContainsType("\x1a", not_condition=True),
            ContainsType("\x1b", not_condition=True),
            ContainsType("\x1d", not_condition=True),
            ContainsType("\x1e", not_condition=True),
            ContainsType("\x1f", not_condition=True),
            ContainsType(" ", not_condition=True),
            ContainsType("\x1c", not_condition=True),
            ContainsType("\x7f", not_condition=True),
        ],
        target_pre_condition_list=[],
        target_post_condition_list=[],
        transformation_list=[
            Transformation(
                "Inconsistency_transformation_composite_middle_without_slash(#)",
                SubStringUntilTransformation(0, "#"),
                [ContainsType("#", not_condition=False)],
            )
        ],
        essential_transformation_list=[],
        is_normalize=False,
        is_decode=False,
    )
    nginx = Server(
        name="nginx",
        condition_list=[
            ContainsType("\x00", not_condition=True),
            ContainsType("\x01", not_condition=True),
            ContainsType("\x02", not_condition=True),
            ContainsType("\x03", not_condition=True),
            ContainsType("\x04", not_condition=True),
            ContainsType("\x05", not_condition=True),
            ContainsType("\x06", not_condition=True),
            ContainsType("\x07", not_condition=True),
            ContainsType("\x08", not_condition=True),
            ContainsType("\t", not_condition=True),
            ContainsType("\n", not_condition=True),
            ContainsType("\x0b", not_condition=True),
            ContainsType("\x0c", not_condition=True),
            ContainsType("\r", not_condition=True),
            ContainsType("\x0e", not_condition=True),
            ContainsType("\x0f", not_condition=True),
            ContainsType("\x10", not_condition=True),
            ContainsType("\x11", not_condition=True),
            ContainsType("\x13", not_condition=True),
            ContainsType("\x12", not_condition=True),
            ContainsType("\x16", not_condition=True),
            ContainsType("\x15", not_condition=True),
            ContainsType("\x19", not_condition=True),
            ContainsType("\x17", not_condition=True),
            ContainsType("\x1a", not_condition=True),
            ContainsType("\x14", not_condition=True),
            ContainsType("\x18", not_condition=True),
            ContainsType("\x1d", not_condition=True),
            ContainsType("\x1e", not_condition=True),
            ContainsType("\x1f", not_condition=True),
            ContainsType(" ", not_condition=True),
            ContainsType("\x1c", not_condition=True),
            ContainsType("\x1b", not_condition=True),
            ContainsType("\x7f", not_condition=True),
        ],
        target_pre_condition_list=[],
        target_post_condition_list=[],
        transformation_list=[],
        essential_transformation_list=[],
        is_normalize=False,
        is_decode=False,
    )
    return [apachetrafficserver, nginx]
