"""
Run exploit-generation / validation experiments for multiple case studies.

For every entry in rules.json we assume the following layout:

case_study/<RULE_DIR>/
├─ presets/
│  └─ surrogate_model_for_experiment/   <-- surrogate *.py files
├─ tools/
│  ├─ generate_exploit_payloads_for_experiment.py
│  └─ validate_exploit_payloads_for_experiment.py   (optional)
└─ generation_results/                  <-- results written here
"""

from __future__ import annotations
import os
import json
import subprocess
import argparse
from typing import List


def run(cmd: List[str]) -> None:
    """Execute *cmd* and print a concise status message."""
    try:
        subprocess.run(cmd, check=True)
        print(f"✅  {' '.join(cmd)}")
    except subprocess.CalledProcessError as err:
        print(f"❌  {' '.join(cmd)}\n    ↳ {err}")


def main() -> None:
    ap = argparse.ArgumentParser(
        description="Orchestrate exploit-generation / validation across case studies"
    )
    ap.add_argument("--rules", required=True, help="Path to rules.json")
    ap.add_argument("--iterations", default="5", help="# iterations")
    ap.add_argument("--timeout", default="10", help="SMT timeout (s)")
    ap.add_argument("--max-transformation", default="1", help="Max transformations")
    ap.add_argument("--max-workers", default="6", help="# parallel SMT workers")
    args = ap.parse_args()

    rules = json.load(open(args.rules, encoding="utf-8"))["rules"]

    for rule in rules:
        rule_dir = rule["directory"]
        target_url = rule["output_url"]

        case_study_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
        surrogate_dir = os.path.join("case_study", rule_dir, "presets", "surrogate_model_for_experiment")
        tools_dir = os.path.join(case_study_root, "tools")
        gen_script = os.path.join(tools_dir, "generate_exploit_payloads_for_experiment.py")
        val_script = os.path.join(tools_dir, "validate_exploit_payloads_for_experiment.py")

        # prepare output dirs for generation & validation
        gen_results_root = os.path.join(case_study_root, "generation_results", rule_dir)
        val_results_root = os.path.join(case_study_root, "validation_results", rule_dir)
        os.makedirs(gen_results_root, exist_ok=True)
        os.makedirs(val_results_root, exist_ok=True)

        # 2. Payload generation
        run([
            "python", gen_script,
            "--surrogate-dir", surrogate_dir,
            "--iterations", args.iterations,
            "--timeout", args.timeout,
            "--max-transformation", args.max_transformation,
            "--target-path", target_url,
            "--max-workers", args.max_workers,
            "--results-dir", gen_results_root,
        ])

        # 3. Payload validation
        run([
            "python", val_script,
            "--gen-dir", gen_results_root,
            "--timeout", args.timeout,
            "--val-dir", val_results_root,
        ])


if __name__ == "__main__":
    main()