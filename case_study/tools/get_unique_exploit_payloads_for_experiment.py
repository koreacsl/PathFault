#!/usr/bin/env python3
# case_study/tools/get_unique_exploit_payloads_for_experiment.py
"""
Scan *DIRECTORY* (recursively), collect every payload that appears in
`candidate_summary.successful_candidates` lists, and write a JSON file with
the unique set.

Output schema
-------------
{
  "payloads": [...],   # list[str]
  "count": 123         # int, len(payloads)
}
"""

from __future__ import annotations
import json, sys
from pathlib import Path
import click


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  core logic  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def collect_payloads(folder: Path) -> set[str]:
    """Return the union of all `successful_candidates` found under *folder*."""
    aggregated: set[str] = set()

    for jf in folder.rglob("*.json"):
        try:
            data = json.loads(jf.read_text(encoding="utf-8"))
        except Exception as e:
            click.echo(f"[warn] could not read {jf}: {e}", err=True)
            continue

        cand = data.get("candidate_summary", {})
        sc = cand.get("successful_candidates")
        if isinstance(sc, list):
            for entry in sc:
                if isinstance(entry, str):
                    aggregated.add(entry)

    return aggregated


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  CLI  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
@click.command()
@click.argument(
    "directory",
    type=click.Path(exists=True, file_okay=False, dir_okay=True, path_type=Path),
)
@click.option(
    "-o",
    "--output",
    default="output.json",
    show_default=True,
    help="Destination JSON file.",
    type=click.Path(writable=True, dir_okay=False, path_type=Path),
)
def cli(directory: Path, output: Path):
    """Aggregate all successful payloads under DIRECTORY into a single JSON."""
    payloads = collect_payloads(directory)
    result = {"payloads": sorted(payloads), "count": len(payloads)}

    try:
        output.parent.mkdir(parents=True, exist_ok=True)
        output.write_text(json.dumps(result, indent=2), encoding="utf-8")
        click.echo(f"ðŸŽ¯  Collected {len(payloads)} unique payload(s) â†’ {output}")
    except Exception as e:
        raise click.ClickException(f"Failed to write {output}: {e}")


if __name__ == "__main__":
    cli()